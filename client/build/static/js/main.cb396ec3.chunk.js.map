{"version":3,"sources":["web3/provider.js","components/setUserName.js","components/winner.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["web3","SetUserName","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","username","target","value","setState","name","handleSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","preventDefault","addUser","state","console","log","stop","_x","apply","arguments","react_default","createElement","onSubmit","onChange","placeholder","type","React","Component","ShowWinner","user","_this$props","winner","users","List","list","map","index","key","window","ethereum","Web3","enable","catch","error","currentProvider","provider","providers","HttpProvider","App","contract","accounts","storageValue","componentDidMount","networkId","deployedNetwork","instance","eth","getAccounts","sent","net","getId","Roulette","networks","Contract","abi","address","from","defaultAccount","runExample","_callee2","_ref3","response","_context2","methods","getTest","runTest","_callee3","_ref5","_context3","setTest","send","_callee4","_ref7","_context4","concat","toConsumableArray","getUsersArray","_callee5","_ref9","response2","_context5","setUserName","viewUsers","generateRandomNumber","_callee6","_ref11","winNum","_context6","getWinner","_this2","className","components_List","onClick","components_winner","jsx","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb396ec3.chunk.js","sourcesContent":["import Web3 from \"web3\"\n\nlet web3\n\nif (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\"){\n  web3 = new Web3(window.ethereum)\n\n  window.ethereum.enable().catch(error => {\n    console.console.log(error);\n  })\n}\nelse if(typeof window !== \"undefined\" && typeof window.web3 !== \"undefined\") {\n  web3 = new Web3(window.web3.currentProvider)\n}\nelse{\n  const httpEndpoint =\"http://127.0.0.1/8545\"\n  const provider = new Web3.providers.HttpProvider(httpEndpoint)\n  web3 = new Web3(provider)\n}\n\nexport default web3;","import React from \"react\";\n\nclass SetUserName extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = { name : \"\"}\n    }\n\n    handleChange = (e) => {\n        const username = e.target.value;\n        this.setState({name:username})\n    }\n\n    handleSubmit = async(e) => {\n        e.preventDefault();\n        await this.props.addUser(this.state.name);\n        console.log(\"name\",this.state.name)\n        await this.setState({name : \"\"})\n    }\n\n    render(){\n        return(\n            <div>\n                {/* <p>SetUserName</p> */}\n                <form onSubmit={this.handleSubmit}>\n                    <input value={this.state.name} onChange={this.handleChange} placeholder=\"Candicate's name\" />\n                    <input type=\"submit\" value=\"Add\" />\n                </form>\n            </div>\n        )\n    }\n\n}\n\nexport default SetUserName;","import React from \"react\"\n\nclass ShowWinner extends React.Component{\n    state = { user: \"\"};\n\n    render(){\n        const {winner, users} = this.props;\n        console.log(winner)\n        console.log(users)\n        console.log(users[winner-1])\n        return (\n            <div>\n                <p>\n                    Winner : {users[winner-1]}\n                </p>\n            </div>\n        )\n    }\n}\n\nexport default ShowWinner;\n","import React from \"react\";\n\nclass List extends React.Component {\n  render() {\n    const { users } = this.props;\n    const list = users.map((user, index) => {\n        return (\n          <li key={index}>\n            {user}\n          </li>\n        );\n      });\n\n      return (\n        <div>\n          <h2>List</h2>\n          <ul>{list}</ul>\n        </div>\n      );\n    }\n}\n\nexport default List;","import React from \"react\"\nimport Roulette from \"./contracts/Roulette\"\nimport SetUserName from \"./components/setUserName\";\nimport ShowWinner from \"./components/winner\"\nimport List from \"./components/List\"\n// import getInstance from './web3/getInstance';\nimport web3  from './web3/provider'\n\nexport default class App extends React.Component{\n\n  state = {contract : null,accounts:null,storageValue:null, users: [], winner : \"\"}\n\n  componentDidMount = async () => {\n    const accounts = await web3.eth.getAccounts();\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Roulette.networks[networkId];\n    const instance = new web3.eth.Contract(\n      Roulette.abi,\n      deployedNetwork.address,\n      { from: web3.eth.defaultAccount }\n      // {from:accounts[0]}\n    );\n    await this.setState({contract:instance, accounts:accounts})\n    console.log(\"Your account:\",accounts)\n    console.log(\"Contract Instance :\",this.state.contract)\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = await this.state;\n    const response = await contract.methods.getTest().call();\n    await this.setState({ storageValue: response });\n    console.log(\"Response : \",this.state.storageValue)\n  };\n\n  runTest = async () => {\n    const { accounts, contract } = await this.state;\n    const response = await contract.methods.setTest(99).send({from:accounts[0]});\n    await this.setState({ storageValue: response });\n    console.log(\"Response : \",this.state.storageValue)\n  };\n\n  addUser = async(name) =>  {\n    const {users, contract, accounts} = await this.state;\n    this.setState({\n      users : [...users, name:name]\n    })\n    console.log(\"state array usrs :\",this.state.users)\n  }\n\n  getUsersArray = async () => {\n    const { accounts, contract,users } = await this.state;\n    console.log(users)\n    const response = await contract.methods.setUserName(users).send({from:accounts[0]})\n    this.setState({ storageValue: response });\n    console.log(\"Response users name : \",response)\n\n    const response2 = await contract.methods.viewUsers().call()\n    await console.log(\"Number of User :\",response2)\n\n    // const response3 = await contract.methods.getUserNames().send({from:accounts[0]})\n    // console.log(\"User names :\",response3)\n  };\n\n  generateRandomNumber = async () => {\n    const { accounts, contract } = await this.state;\n    const response = await contract.methods.generateRandomNumber().send({from:accounts[0]})\n    await this.setState({ storageValue: response });\n    console.log(\"Response random number: \",this.state.storageValue)\n    const winNum = await contract.methods.getWinner().call()\n    this.setState({winner:winNum})\n    console.log(winNum)\n    console.log(this.state.winner)\n  };\n\n    render() {\n         return (\n            <div className=\"top-content\">\n              {/* <GetOwnerInfo/> */}\n              {/* <button onClick={() => this.runTest()}>set 99</button>\n              <button onClick={() => this.runExample()}>TEST</button> */}\n              <h1>Roulette on Ethereum</h1>\n              <SetUserName addUser={this.addUser}/>\n              <List users={this.state.users}/>\n              <p>Send use information to the blockchain</p>\n              <button onClick={() => this.getUsersArray()}>Set</button>\n              <br/>\n              <p>Start Roulette</p>\n              <button onClick={() => this.generateRandomNumber()}>Start</button>\n              {/* <button onClick={() => this.winnerDecide()}>Decide Winner</button> */}\n              <ShowWinner winner={this.state.winner} users={this.state.users} />\n\n              <style jsx>{`\n                .top-content{\n\n                }\n\n                button{\n                    padding: 8px 24px;\n                    color: blue;\n                    display: inline-block;\n                    opacity: 0.8;\n                    border-radius: 4px;\n\n                :hover {\n                    opacity: 1;\n                  }\n                }\n\n              `}</style>\n\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}